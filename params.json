{
  "name": "Async-init",
  "tagline": "",
  "body": "## Le Problem\r\nAsynchronous init can be a pain to work with. For example, look at the following code.\r\n\r\n```js\r\nconst db = require('some-database-library');\r\ndb.init(function callback(){\r\n\tconsole.log('init done!');\r\n});\r\nexports.getUser = function(callback) {\r\n\tdb.query('user', callback);\r\n};\r\n```\r\n\r\nThe flaw of this code is that any getUser function call before the init is finished will fail. Notice that your database init is asynchronous but your exports.getUser must be declared synchronously. The correct implementation of this program is not clean as it requires *Promise* and callback, or worse change your function design entirely. This library tries to offer a nice-ish solution.\r\n\r\n## Example\r\n```js\r\nconst init = require('async-init').create();\r\nconst db = require('some-database-library');\r\ndb.init(init.done);\r\n\r\nconst db2 = init.wrapAll(db);\r\nexports.getUser = function(callback) {\r\n\t//here db.query will be called after db.init is completed.\r\n\tdb2.query('user' ,callback);\r\n};\r\n```\r\n\r\n## API\r\n\r\n#### init.done\r\nCall this function when the init is done.\r\n\r\n#### init.wrapAll(object)\r\nCreate a new wrapper object delegating all functions call until after the init is done. Non-function properties are copied over.\r\n\r\n#### init.wrap(object, functionName:string)\r\nReturn a single wrapping function.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}